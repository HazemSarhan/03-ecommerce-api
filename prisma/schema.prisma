// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  phoneNumber String
  password String
  bio String?
  profilePicture String?
  googleId  String?  @unique
  isEmailVerified         Boolean  @default(false)
  isPhoneVerified         Boolean  @default(false)
  emailVerificationToken String?
  emailTokenExpiration DateTime?
  phoneVerificationToken String?
  phoneTokenExpiration  DateTime?

  role UserRoles @default(CUSTOMER)
  reviews Review[]
  cart Cart[]
  orders Order[]
  payments Payment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  name String
  description String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String
  price Float
  stockStatus Stock @default(IN_STOCK)
  stockNumber Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  image String
  numberOfReviews Int?
  averageRating Int?
  reviews Review[]
  cart Cart[]
  orderItems OrderItems[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  product Product @relation(fields: [productId], references: [id])
  productId Int
  rating Int
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  product Product @relation(fields: [productId], references: [id])
  productId Int
  quantity Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([productId, userId])
}

model Order {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String 
  totalPrice Float
  paymentId String
  status OrderStatus @default(PENDING)
  orderItems OrderItems[]
  payments Payment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItems {
  id Int @id @default(autoincrement())
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  priceAtTime Float
  quantity Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id Int @id @default(autoincrement())
  paymentId String
  user User @relation(fields: [userId], references: [id])
  userId String 
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  provider String
  method String
  status PaymentStatus @default(PENDING)
  amount Float
  currency String @default("usd")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum Stock {
  IN_STOCK
  OUT_OF_STOCK
}

enum UserRoles {
  ADMIN
  CUSTOMER
}

